package functions;

import org.jblas.DoubleMatrix;

/**
 * Implements concatenation of two SmoothFunctions
 * f(x) = [ f1(x) ]
 * 		  [ f2(x) ]
 * 
 * @author Julian
 *
 */
public class FunctionConcatenation implements SmoothFunction {
	
	private SmoothFunction f1;
	private SmoothFunction f2;
	
	public FunctionConcatenation(SmoothFunction f1, SmoothFunction f2){
		if(f1.getDomainDimension() != f2.getDomainDimension()){
			throw new IllegalArgumentException();
		}
		this.f1 = f1;
		this.f2 = f2;
	}
	/**
	 * 
	 * @param x Point of function evaluation
	 * @return f1.evaluate(x) concat f2.evaluate(x)
	 */
	@Override
	public DoubleMatrix evaluate(DoubleMatrix x) {
		return DoubleMatrix.concatVertically(f1.evaluate(x), f2.evaluate(x));
	}

	@Override
	public DoubleMatrix gradient(DoubleMatrix x, int i) {
		if(i < 0 || i >= getRangeDimension()){
			throw new IllegalArgumentException();
		}
		if(i < f1.getRangeDimension()){
			return f1.gradient(x, i);
		} else {
			return f2.gradient(x, i - f1.getRangeDimension());
		}
	}

	@Override
	public DoubleMatrix hessian(DoubleMatrix x, int i) {
		if(i < 0 || i >= getRangeDimension()){
			throw new IllegalArgumentException();
		}
		if(i < f1.getRangeDimension()){
			return f1.hessian(x, i);
		} else {
			return f2.hessian(x, i - f1.getRangeDimension());
		}
	}

	@Override
	public int getDomainDimension() {
		return f1.getDomainDimension();
	}

	@Override
	public int getRangeDimension() {
		return f1.getRangeDimension() + f2.getRangeDimension();
	}
	
}
